generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum GameType {
    RANKED
    PLAY_OFF
    TOURNEY
}

enum JapaneseTransactionType {
    DEAL_IN
    SELF_DRAW
    DEAL_IN_PAO
    SELF_DRAW_PAO
    NAGASHI_MANGAN
    INROUND_RYUUKYOKU
}

enum HongKongTransactionType {
    DEAL_IN
    SELF_DRAW
    DEAL_IN_PAO
    SELF_DRAW_PAO
}

enum GameStatus {
    IN_PROGRESS
    FINISHED
}

enum Wind {
    EAST
    SOUTH
    WEST
    NORTH
}

model Player {
    id                    String               @id @default(cuid())
    email                 String               @unique
    username              String               @unique
    firstName             String
    lastName              String
    password              String
    admin                 Boolean              @default(false)
    japaneseQualified     Boolean              @default(false)
    hongKongQualified     Boolean              @default(false)
    legacyDisplayGame     Boolean              @default(false)
    createdAt             DateTime             @default(now())
    japaneseGames         JapanesePlayerGame[]
    japaneseGamesRecorded JapaneseGame[]
    hongKongGames         HongKongPlayerGame[]
    hongKongGamesRecorded HongKongGame[]
}

model JapanesePlayerGame {
    id        String        @id @default(cuid())
    wind      Wind
    eloChange Float?
    player    Player        @relation(fields: [playerId], references: [id])
    playerId  String
    game      JapaneseGame? @relation(fields: [gameId], references: [id])
    gameId    Int?
}

model HongKongPlayerGame {
    id        String        @id @default(cuid())
    wind      Wind
    eloChange Float?
    player    Player        @relation(fields: [playerId], references: [id])
    playerId  String
    game      HongKongGame? @relation(fields: [gameId], references: [id])
    gameId    Int?
}

model Season {
    id            String         @id @default(cuid())
    name          String
    startDate     DateTime       @default(now())
    endDate       DateTime
    japaneseGames JapaneseGame[]
    hongKongGames HongKongGame[]
}

model JapaneseGame {
    id           Int                  @id @default(autoincrement())
    season       Season               @relation(fields: [seasonId], references: [id])
    seasonId     String
    status       GameStatus
    type         GameType
    createdAt    DateTime             @default(now())
    endedAt      DateTime?
    recordedBy   Player               @relation(fields: [recordedById], references: [id])
    recordedById String
    rounds       JapaneseRound[]
    players      JapanesePlayerGame[]
}

model JapaneseRound {
    id                    String                @id @default(cuid())
    roundCount            Int
    roundWind             Wind
    roundNumber           Int
    bonus                 Int
    startRiichiStickCount Int
    endRiichiStickCount   Int
    game                  JapaneseGame          @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId                Int
    player0Riichi         Boolean               @default(false)
    player1Riichi         Boolean               @default(false)
    player2Riichi         Boolean               @default(false)
    player3Riichi         Boolean               @default(false)
    player0Tenpai         Boolean               @default(false)
    player1Tenpai         Boolean               @default(false)
    player2Tenpai         Boolean               @default(false)
    player3Tenpai         Boolean               @default(false)
    transactions          JapaneseTransaction[]
}

model JapaneseTransaction {
    id                 String                  @id @default(cuid())
    transactionType    JapaneseTransactionType
    player0ScoreChange Int                     @default(0)
    player1ScoreChange Int                     @default(0)
    player2ScoreChange Int                     @default(0)
    player3ScoreChange Int                     @default(0)
    han                Int?
    fu                 Int?
    dora               Int?
    paoPlayerIndex     Int?
    round              JapaneseRound           @relation(fields: [roundId], references: [id], onDelete: Cascade)
    roundId            String
}

model HongKongGame {
    id           Int                  @id @default(autoincrement())
    season       Season               @relation(fields: [seasonId], references: [id])
    seasonId     String
    status       GameStatus
    type         GameType
    createdAt    DateTime             @default(now())
    endedAt      DateTime?
    recordedBy   Player               @relation(fields: [recordedById], references: [id])
    recordedById String
    rounds       HongKongRound[]
    players      HongKongPlayerGame[]
}

model HongKongRound {
    id           String                @id @default(cuid())
    roundCount   Int
    roundWind    Wind
    roundNumber  Int
    game         HongKongGame          @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId       Int
    transactions HongKongTransaction[]
}

model HongKongTransaction {
    id                 String                  @id @default(cuid())
    transactionType    HongKongTransactionType
    player0ScoreChange Int                     @default(0)
    player1ScoreChange Int                     @default(0)
    player2ScoreChange Int                     @default(0)
    player3ScoreChange Int                     @default(0)
    hand               Int?
    round              HongKongRound           @relation(fields: [roundId], references: [id], onDelete: Cascade)
    roundId            String
}
