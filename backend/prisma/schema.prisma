generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum GameVariant {
    JAPANESE
    HONG_KONG
}

enum GameType {
    RANKED
    PLAY_OFF
    TOURNEY
}

enum JapaneseRoundType {
    DEAL_IN
    SELF_DRAW
    DECK_OUT
    MISTAKE
    RESHUFFLE
    DEAL_IN_PAO
    SELF_DRAW_PAO
}

enum HongKongRoundType {
    DEAL_IN
    SELF_DRAW
    DECK_OUT
    MISTAKE
    PAO
}

enum GameStatus {
    IN_PROGRESS
    FINISHED
}

enum Wind {
    EAST
    SOUTH
    WEST
    NORTH
}

model Player {
    id                    String               @id @default(cuid())
    email                 String               @unique
    username              String               @unique
    firstName             String
    lastName              String
    password              String
    admin                 Boolean              @default(false)
    japaneseQualified     Boolean              @default(false)
    hongKongQualified     Boolean              @default(false)
    legacyDisplayGame     Boolean              @default(false)
    createdAt             DateTime             @default(now())
    japaneseGames         JapanesePlayerGame[]
    japaneseScores        JapaneseScore[]
    japaneseGamesRecorded JapaneseGame[]
    hongKongGames         HongKongPlayerGame[]
    hongKongScores        HongKongScore[]
    hongKongGamesRecorded HongKongGame[]
}

model JapanesePlayerGame {
    id        String        @id @default(cuid())
    wind      Wind
    eloChange Float?
    position  Int?
    player    Player        @relation(fields: [playerId], references: [id])
    playerId  String
    game      JapaneseGame? @relation(fields: [gameId], references: [id])
    gameId    Int?
}

model HongKongPlayerGame {
    id        String        @id @default(cuid())
    wind      Wind
    eloChange Float?
    position  Int?
    player    Player        @relation(fields: [playerId], references: [id])
    playerId  String
    game      HongKongGame? @relation(fields: [gameId], references: [id])
    gameId    Int?
}

model Season {
    id            String         @id @default(cuid())
    name          String
    startDate     DateTime       @default(now())
    endDate       DateTime
    japaneseGames JapaneseGame[]
    hongKongGames HongKongGame[]
}

model JapaneseGame {
    id           Int                  @id @default(autoincrement())
    season       Season               @relation(fields: [seasonId], references: [id])
    seasonId     String
    status       GameStatus
    gameType     GameType
    createdAt    DateTime             @default(now())
    endedAt      DateTime?
    recordedBy   Player               @relation(fields: [recordedById], references: [id])
    recordedById String
    rounds       JapaneseRound[]
    players      JapanesePlayerGame[]
}

model JapaneseRound {
    id                  String            @id @default(cuid())
    roundCount          Int
    roundWind           Wind
    roundNumber         Int
    bonus               Int
    riichiSticksOnTable Int
    roundType           JapaneseRoundType
    game                JapaneseGame      @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId              Int
    scores              JapaneseScore[]
    hand                JapaneseHand[]
}

model JapaneseScore {
    id          String        @id @default(cuid())
    scoreChange Int
    riichi      Boolean
    round       JapaneseRound @relation(fields: [roundId], references: [id], onDelete: Cascade)
    player      Player        @relation(fields: [playerId], references: [id])
    playerId    String
    roundId     String
}

model JapaneseHand {
    id          String        @id @default(cuid())
    points      Int
    fu          Int
    dora        Int
    description String?
    round       JapaneseRound @relation(fields: [roundId], references: [id], onDelete: Cascade)
    roundId     String
}

model HongKongGame {
    id           Int                  @id @default(autoincrement())
    season       Season               @relation(fields: [seasonId], references: [id])
    seasonId     String
    status       GameStatus
    gameType     GameType
    createdAt    DateTime             @default(now())
    endedAt      DateTime?
    recordedBy   Player               @relation(fields: [recordedById], references: [id])
    recordedById String
    rounds       HongKongRound[]
    players      HongKongPlayerGame[]
}

model HongKongRound {
    id          String            @id @default(cuid())
    roundCount  Int
    roundWind   Wind
    roundNumber Int
    bonus       Int
    roundType   HongKongRoundType
    game        HongKongGame      @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId      Int
    scores      HongKongScore[]
    hand        HongKongHand[]
}

model HongKongScore {
    id          String        @id @default(cuid())
    scoreChange Int
    round       HongKongRound @relation(fields: [roundId], references: [id], onDelete: Cascade)
    player      Player        @relation(fields: [playerId], references: [id])
    playerId    String
    roundId     String
}

model HongKongHand {
    id          String        @id @default(cuid())
    points      Int
    description String?
    round       HongKongRound @relation(fields: [roundId], references: [id], onDelete: Cascade)
    roundId     String
}
