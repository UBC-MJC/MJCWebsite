generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum GameVariant {
    JAPANESE
    HONG_KONG
}

enum GameType {
    RANKED
    PLAY_OFF
    TOURNEY
}

enum JapaneseRoundType {
    DEAL_IN
    SELF_DRAW
    DECK_OUT
    MISTAKE
    RESHUFFLE
    DEAL_IN_PAO
    SELF_DRAW_PAO
}

enum HongKongRoundType {
    DEAL_IN
    SELF_DRAW
    DECK_OUT
    MISTAKE
    PAO
}

enum GameStatus {
    IN_PROGRESS
    FINISHED
}

enum Wind {
    EAST
    SOUTH
    WEST
    NORTH
}

enum ActionType {
    RON
    TSUMO
    CHOMBO
    TENPAI
    DEAL_IN_PAO
    SELF_DRAW_PAO
    NAGASHI_MANGAN
}

model Player {
    id                            String                @id @default(cuid())
    email                         String                @unique
    username                      String                @unique
    firstName                     String
    lastName                      String
    password                      String
    admin                         Boolean               @default(false)
    japaneseQualified             Boolean               @default(false)
    hongKongQualified             Boolean               @default(false)
    legacyDisplayGame             Boolean               @default(false)
    createdAt                     DateTime              @default(now())
    japaneseGames                 JapanesePlayerGame[]
    japaneseReceivingTransactions JapaneseTransaction[] @relation("Receives")
    japaneseGivingTransactions    JapaneseTransaction[] @relation("Gives")
    japaneseGamesRecorded         JapaneseGame[]
    hongKongGames                 HongKongPlayerGame[]
    hongKongScores                HongKongScore[]
    hongKongGamesRecorded         HongKongGame[]
    JapanesePoint                 JapanesePoint[]
}

model JapanesePlayerGame {
    id        String        @id @default(cuid())
    wind      Wind
    eloChange Float?
    position  Int?
    player    Player        @relation(fields: [playerId], references: [id])
    playerId  String
    game      JapaneseGame? @relation(fields: [gameId], references: [id])
    gameId    Int?
}

model HongKongPlayerGame {
    id        String        @id @default(cuid())
    wind      Wind
    eloChange Float?
    position  Int?
    player    Player        @relation(fields: [playerId], references: [id])
    playerId  String
    game      HongKongGame? @relation(fields: [gameId], references: [id])
    gameId    Int?
}

model Season {
    id            String         @id @default(cuid())
    name          String
    startDate     DateTime       @default(now())
    endDate       DateTime
    japaneseGames JapaneseGame[]
    hongKongGames HongKongGame[]
}

model JapaneseGame {
    id           Int                  @id @default(autoincrement())
    season       Season               @relation(fields: [seasonId], references: [id])
    seasonId     String
    status       GameStatus
    gameType     GameType
    createdAt    DateTime             @default(now())
    endedAt      DateTime?
    recordedBy   Player               @relation(fields: [recordedById], references: [id])
    recordedById String
    rounds       JapaneseRound[]
    players      JapanesePlayerGame[]
}

model JapaneseRound {
    id                  String                @id @default(cuid())
    roundCount          Int
    roundWind           Wind
    roundNumber         Int
    bonus               Int
    pointStatus         JapanesePoint[] // list of size 4 representing the points that each player has
    transactions        JapaneseTransaction[] // The transaction that happens DURING the round
    riichiSticksOnTable Int // The riichi sticks AT THE START of the game
    game                JapaneseGame          @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId              Int
}

model JapanesePoint {
    id              String        @id @default(cuid())
    round           JapaneseRound @relation(fields: [japaneseRoundId], references: [id])
    japaneseRoundId String
    player          Player        @relation(fields: [playerID], references: [id])
    playerID        String
    points          Int
}

model JapaneseTransaction {
    id              String        @id @default(cuid())
    round           JapaneseRound @relation(fields: [roundID], references: [id], onDelete: Cascade)
    roundID         String
    actionType      ActionType
    pointReceiver   Player        @relation("Receives", fields: [pointReceiverID], references: [id])
    pointReceiverID String
    pointGiver      Player        @relation("Gives", fields: [pointGiverID], references: [id])
    pointGiverID    String
    hand            JapaneseHand? @relation(fields: [japaneseHandId], references: [id])
    japaneseHandId  String?
    amount          Int
}

model JapaneseHand {
    id                  String                @id @default(cuid())
    fu                  Int
    han                 Int
    honba               Int
    dora                Int
    description         String?
    JapaneseTransaction JapaneseTransaction[]
}

model HongKongGame {
    id           Int                  @id @default(autoincrement())
    season       Season               @relation(fields: [seasonId], references: [id])
    seasonId     String
    status       GameStatus
    gameType     GameType
    createdAt    DateTime             @default(now())
    endedAt      DateTime?
    recordedBy   Player               @relation(fields: [recordedById], references: [id])
    recordedById String
    rounds       HongKongRound[]
    players      HongKongPlayerGame[]
}

model HongKongRound {
    id          String            @id @default(cuid())
    roundCount  Int
    roundWind   Wind
    roundNumber Int
    bonus       Int
    roundType   HongKongRoundType
    game        HongKongGame      @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId      Int
    scores      HongKongScore[]
    hand        HongKongHand[]
}

model HongKongScore {
    id          String        @id @default(cuid())
    scoreChange Int
    round       HongKongRound @relation(fields: [roundId], references: [id], onDelete: Cascade)
    player      Player        @relation(fields: [playerId], references: [id])
    playerId    String
    roundId     String
}

model HongKongHand {
    id          String        @id @default(cuid())
    points      Int
    description String?
    round       HongKongRound @relation(fields: [roundId], references: [id], onDelete: Cascade)
    roundId     String
}
